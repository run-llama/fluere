{
  "name": "@llama-flow/core",
  "version": "0.3.6",
  "description": "event-based workflow engine",
  "type": "module",
  "main": "dist/index.cjs",
  "types": "dist/index.d.ts",
  "module": "dist/index.js",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      },
      "require": {
        "types": "./dist/index.d.cts",
        "default": "./dist/index.cjs"
      },
      "default": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    },
    "./async-context": {
      "browser": {
        "types": "./dist/async-context/index.d.ts",
        "default": "./dist/async-context/index.browser.js"
      },
      "import": {
        "types": "./dist/async-context/index.d.ts",
        "default": "./dist/async-context/index.js"
      },
      "require": {
        "types": "./dist/async-context/index.d.cts",
        "default": "./dist/async-context/index.cjs"
      },
      "default": {
        "types": "./dist/async-context/index.d.ts",
        "default": "./dist/async-context/index.js"
      }
    },
    "./interrupter/hono": {
      "types": "./dist/interrupter/hono.d.ts",
      "default": "./dist/interrupter/hono.js"
    },
    "./interrupter/mcp": {
      "types": "./dist/interrupter/mcp.d.ts",
      "default": "./dist/interrupter/mcp.js"
    },
    "./interrupter/next": {
      "types": "./dist/interrupter/next.d.ts",
      "default": "./dist/interrupter/next.js"
    },
    "./interrupter/promise": {
      "types": "./dist/interrupter/promise.d.ts",
      "default": "./dist/interrupter/promise.js"
    },
    "./middleware/store": {
      "types": "./dist/middleware/store.d.ts",
      "default": "./dist/middleware/store.js"
    },
    "./middleware/trace-events": {
      "types": "./dist/middleware/trace-events.d.ts",
      "default": "./dist/middleware/trace-events.js"
    },
    "./middleware/validation": {
      "types": "./dist/middleware/validation.d.ts",
      "default": "./dist/middleware/validation.js"
    },
    "./util/p-retry": {
      "types": "./dist/util/p-retry.d.ts",
      "default": "./dist/util/p-retry.js"
    },
    "./util/zod": {
      "types": "./dist/util/zod.d.ts",
      "default": "./dist/util/zod.js"
    },
    "./stream/consumer": {
      "types": "./dist/stream/consumer.d.ts",
      "default": "./dist/stream/consumer.js"
    },
    "./stream/filter": {
      "types": "./dist/stream/filter.d.ts",
      "default": "./dist/stream/filter.js"
    },
    "./stream/find": {
      "types": "./dist/stream/find.d.ts",
      "default": "./dist/stream/find.js"
    },
    "./stream/until": {
      "types": "./dist/stream/until.d.ts",
      "default": "./dist/stream/until.js"
    }
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "dev": "swc src -d dist -w --strip-leading-paths",
    "compile": "rm -rf dist *.tsbuildinfo && pnpm run compile:code && pnpm run compile:types && cp ../../README.md .",
    "compile:code": "swc src -d dist --strip-leading-paths",
    "compile:types": "tsc --project tsconfig.build.json",
    "test": "vitest run",
    "test:ui": "vitest --ui",
    "prepublishOnly": "cp ../../README.md ./README.md"
  },
  "devDependencies": {
    "@modelcontextprotocol/sdk": "^1.10.1",
    "@swc/cli": "^0.7.3",
    "@swc/core": "^1.11.21",
    "@types/node": "^22.14.1",
    "hono": "^4.7.7",
    "next": "^15.3.1",
    "p-retry": "^6.2.1",
    "rimraf": "^6.0.1",
    "stream-chain": "^3.4.0",
    "typescript": "^5.8.3",
    "zod": "^3.24.3"
  },
  "peerDependencies": {
    "@modelcontextprotocol/sdk": "^1.7.0",
    "hono": "^4.7.4",
    "next": "^15.2.2",
    "p-retry": "^6.2.1",
    "zod": "^3.24.2"
  },
  "license": "MIT",
  "peerDependenciesMeta": {
    "@modelcontextprotocol/sdk": {
      "optional": true
    },
    "hono": {
      "optional": true
    },
    "next": {
      "optional": true
    },
    "p-retry": {
      "optional": true
    },
    "zod": {
      "optional": true
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/run-llama/llama-flow.git"
  },
  "publishConfig": {
    "access": "public"
  }
}
